package General;


import Utilities.FileHandling;
import Utilities.UserRegistrationInfo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class ManagerManageOrder extends javax.swing.JFrame {

    UserRegistrationInfo mgr = new UserRegistrationInfo();
      
    private final String POFILE = "pendingOrders.txt";
    private final String COFILE = "completedOrders.txt";
    
    // Create new form "ManagerMenu"
    public ManagerManageOrder(String userID, String userPassword) {
        initComponents();
        setContentPane(mainPanel);
        setTitle("APU Cafeteria Ordering System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
        setSize(1080,635); 

        // Set the user ID
        mgr.setUserID(userID);
        mgr.setUserPassword(userPassword);
        userIDTF.setText(userID);

        // Load the menu as soon as the window loads
        loadMenu();
        
        // Set a formatted date and time in the datetime text field
        LocalDateTime dateObj = LocalDateTime.now();
        DateTimeFormatter formatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String formattedDate = dateObj.format(formatObj);
        datetimeTF.setText(formattedDate);
    }

    // To load the menu by putting everything in pendingOrders.txt to pendingOrdersTable
    private void loadMenu() {
        DefaultTableModel POTableModel = (DefaultTableModel) pendingOrdersTable.getModel();
        POTableModel.setRowCount(0);
        File file = new File(POFILE);
        try {
            String str;
            BufferedReader br = new BufferedReader(new FileReader(file));
            try {
                while((str = br.readLine()) != null){
                    // Spliting the data into different section using the | delimeter
                    String data[] = str.split("\\|");
                    // Adding the data into the pendingOrdersTable
                    POTableModel.addRow(new Object[]{data[0], data[1], data[2], data[3], data[4], data[5]});
                }
                br.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error: File cannot be read.");
                System.err.println("Exception occurred - " + e.toString());
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error: File does not exist!");
            System.err.println("Exception occurred - " + e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        userIDTF = new javax.swing.JLabel();
        userDisplayLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        datetimeTF = new javax.swing.JTextField();
        welcomeLabel = new javax.swing.JLabel();
        orderCompleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pendingOrdersTable = new javax.swing.JTable();
        pendingOrdersLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setMinimumSize(new java.awt.Dimension(1080, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setBackground(new java.awt.Color(244, 244, 244));
        mainPanel.setPreferredSize(new java.awt.Dimension(1366, 768));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablePanel.setBackground(new java.awt.Color(255, 255, 255));
        tablePanel.setForeground(new java.awt.Color(255, 255, 255));
        tablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        mainPanel.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(533, 257, 881, -1));

        backButton.setFont(new java.awt.Font("SF Pro Text", 0, 16)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 0, 0));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        mainPanel.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 263, 138, 78));

        userIDTF.setBackground(new java.awt.Color(18, 18, 18));
        userIDTF.setFont(new java.awt.Font("SF Pro Text", 1, 18)); // NOI18N
        userIDTF.setForeground(new java.awt.Color(0, 102, 155));
        userIDTF.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userIDTF.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        mainPanel.add(userIDTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 120, 68));

        userDisplayLabel.setBackground(new java.awt.Color(18, 18, 18));
        userDisplayLabel.setFont(new java.awt.Font("SF Pro Text", 1, 24)); // NOI18N
        userDisplayLabel.setForeground(new java.awt.Color(255, 255, 255));
        userDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userDisplayLabel.setText("USER ID");
        mainPanel.add(userDisplayLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 40));

        timeLabel.setFont(new java.awt.Font("SF Pro Text", 0, 18)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setText("Time:");
        mainPanel.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 180, -1, -1));

        datetimeTF.setEditable(false);
        datetimeTF.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        datetimeTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datetimeTF.setEnabled(false);
        datetimeTF.setFocusable(false);
        datetimeTF.setRequestFocusEnabled(false);
        datetimeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datetimeTFActionPerformed(evt);
            }
        });
        mainPanel.add(datetimeTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 170, 124, 32));

        welcomeLabel.setBackground(new java.awt.Color(18, 18, 18));
        welcomeLabel.setFont(new java.awt.Font("SF Pro Text", 1, 36)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 0, 0));
        welcomeLabel.setText("Welcome To The APU Cafeteria Ordering System ");
        mainPanel.add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 1163, 127));

        orderCompleteButton.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        orderCompleteButton.setForeground(new java.awt.Color(255, 0, 0));
        orderCompleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/verify users.png"))); // NOI18N
        orderCompleteButton.setText("Order Completed");
        orderCompleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderCompleteButtonActionPerformed(evt);
            }
        });
        mainPanel.add(orderCompleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 480, 200, 40));

        pendingOrdersTable.setFont(new java.awt.Font("SF Pro Text", 0, 11)); // NOI18N
        pendingOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "User ID", "Food ID", "Food", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pendingOrdersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(pendingOrdersTable);
        if (pendingOrdersTable.getColumnModel().getColumnCount() > 0) {
            pendingOrdersTable.getColumnModel().getColumn(0).setResizable(false);
            pendingOrdersTable.getColumnModel().getColumn(1).setResizable(false);
            pendingOrdersTable.getColumnModel().getColumn(2).setResizable(false);
            pendingOrdersTable.getColumnModel().getColumn(3).setResizable(false);
            pendingOrdersTable.getColumnModel().getColumn(4).setResizable(false);
            pendingOrdersTable.getColumnModel().getColumn(5).setResizable(false);
        }

        mainPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, 630, 240));

        pendingOrdersLabel.setFont(new java.awt.Font("SF Pro Text", 0, 18)); // NOI18N
        pendingOrdersLabel.setForeground(new java.awt.Color(255, 255, 255));
        pendingOrdersLabel.setText("Pending Orders:");
        mainPanel.add(pendingOrdersLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 270, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/home-background-image.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        mainPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, -1, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pendingOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendingOrdersTableMouseClicked

    }//GEN-LAST:event_pendingOrdersTableMouseClicked

    private void orderCompleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderCompleteButtonActionPerformed
        DefaultTableModel POTableModel = (DefaultTableModel) pendingOrdersTable.getModel();
        File POFile = new File(POFILE);

        if (pendingOrdersTable.getSelectedRowCount() >= 1) {

            int row = pendingOrdersTable.getSelectedRow();
            Object[] section = new Object[6];

            // Getting the data from pendingOrdersTable
            for (int col = 0; col < POTableModel.getColumnCount(); col++) {
                section[col] = POTableModel.getValueAt(row,col);
            }

            String orderID = String.valueOf(section[0]);
            String foodID = String.valueOf(section[2]);

            // Remove the line in pendingOrders.txt
            FileHandling fh = new FileHandling();
            fh.removeLine(POFile, 0, 2, orderID, foodID);

            try {
                // Add the line to completedOrders.txt
                File COFile = new File(COFILE);
                String fileData = section[0] + "|" + section[1] + "|" + section[2] + "|" + section[3] + "|" + section[4] + "|" + section[5];
                fh.appendToFile(fileData, COFile);
            } catch (IOException e) {
                System.err.println("Exception occurred - " + e.toString());
                throw new IllegalArgumentException("File does not exist!");
            }

            // Reloading the table
            loadMenu();

            JOptionPane.showMessageDialog(null, "Order ID " + orderID + " with Food ID " + foodID + " has been marked as completed!");
            System.out.println("Order ID " + orderID + " with Food ID " + foodID + " has been marked as completed by Manager " + mgr.getUserID() + ".");

        } else if (pendingOrdersTable.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Table is empty!");
        } else {
            JOptionPane.showMessageDialog(null, "No row is selected for completion!");
        }
    }//GEN-LAST:event_orderCompleteButtonActionPerformed

    private void datetimeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datetimeTFActionPerformed

    }//GEN-LAST:event_datetimeTFActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        ManagerHome mgrHome = new ManagerHome(mgr.getUserID(), mgr.getUserPassword());
        mgrHome.setVisible(true);
        this.dispose();
        System.out.println("Manager " + mgr.getUserID() + " has attempted to view Manager Home page.");
    }//GEN-LAST:event_backButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextField datetimeTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton orderCompleteButton;
    private javax.swing.JLabel pendingOrdersLabel;
    private javax.swing.JTable pendingOrdersTable;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel userDisplayLabel;
    private javax.swing.JLabel userIDTF;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
    
}
